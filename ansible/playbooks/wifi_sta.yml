# save as playbooks/wifi_sta.yml
---
- name: Force STA mode and kill AP/autostart
  hosts: jetson
  become: yes
  vars:
    wifi_country: "NL"           # You’re in Amsterdam; don’t use US.
    wifi_iface: "wlan0"          # Change if your interface name differs.
    wifi_ssid: "{ssid_name}"
    wifi_psk:  "{password}"
    sta_conn_name: "{wifi_name}" # Desired NM connection name
    ap_like_patterns:
      - "(?i)accesspopup"
      - "(?i)hotspot"
      - "(?i)ap"

    # Services that tend to force AP or recreate wizard behavior
    ap_services:
      - AccessPopup.service
      - AccessPopup.timer
      - hostapd.service
      - ugv_jupyter.service

  tasks:
    - name: Ensure regulatory domain is set immediately
      command: iw reg set {{ wifi_country }}
      changed_when: false
      failed_when: false

    - name: Persist regulatory domain (CRDA-compatible systems)
      copy:
        dest: /etc/default/crda
        content: "REGDOMAIN={{ wifi_country }}\n"
        owner: root
        group: root
        mode: "0644"
      register: crda_file
      failed_when: false

    - name: Make NetworkManager manage devices (managed=true)
      blockinfile:
        path: /etc/NetworkManager/NetworkManager.conf
        create: yes
        owner: root
        group: root
        mode: "0644"
        block: |
          [main]
          managed=true
      notify: Restart NetworkManager

    - name: Stop AP/“wizard” services if present
      systemd:
        name: "{{ item }}"
        state: stopped
      loop: "{{ ap_services }}"
      ignore_errors: yes

    - name: Disable AP/“wizard” services
      systemd:
        name: "{{ item }}"
        enabled: no
      loop: "{{ ap_services }}"
      ignore_errors: yes

    - name: Mask AP/“wizard” services (belt-and-suspenders)
      systemd:
        name: "{{ item }}"
        masked: yes
      loop: "{{ ap_services }}"
      ignore_errors: yes

    - name: Make sure standalone wpa_supplicant service won’t fight NM
      systemd:
        name: wpa_supplicant.service
        enabled: no
        state: stopped
      ignore_errors: yes

    - name: Ensure STA connection exists (create or update with nmcli)
      shell: |
        set -e
        # If connection doesn't exist, create it by connecting once
        if ! nmcli -t -f NAME connection show | grep -Fx "{{ sta_conn_name }}" >/dev/null 2>&1; then
          nmcli dev wifi connect "{{ wifi_ssid }}" password "{{ wifi_psk }}" ifname "{{ wifi_iface }}" name "{{ sta_conn_name }}"
        fi
        # Normalize desired settings
        nmcli connection modify "{{ sta_conn_name }}" \
          connection.autoconnect yes \
          connection.autoconnect-priority 100 \
          connection.permissions "" \
          wifi.cloned-mac-address preserve \
          ipv4.method auto ipv6.method auto
      args:
        executable: /bin/bash
      register: nm_sta
      changed_when: "'successfully' in nm_sta.stdout_lower or 'modified' in nm_sta.stdout_lower"
      failed_when: false

    - name: Delete any AP-like NM connections (AccessPopup / Hotspot / AP)
      shell: |
        set -e
        nmcli -t -f NAME,TYPE connection show | awk -F: '$2=="wifi"{print $1}' | while read -r n; do
          for rx in {{ ap_like_patterns | map('regex_replace','"','\\"') | map('quote') | join(' ') }}; do
            if echo "$n" | grep -P ${rx} >/dev/null 2>&1; then
              nmcli connection delete "$n" || true
            fi
          done
        done
      args:
        executable: /bin/bash
      changed_when: false
      failed_when: false

    - name: Bring STA connection up now
      command: nmcli connection up "{{ sta_conn_name }}"
      register: up_now
      failed_when: false
      changed_when: "'successfully activated' in up_now.stdout"

    - name: Verify we’re on the right SSID (sanity check)
      shell: iw dev {{ wifi_iface }} link | awk -F': ' '/SSID/ {print $2}'
      register: ssid_now
      changed_when: false
      failed_when: false

    - name: Debug SSID
      debug:
        msg: "Associated SSID: {{ ssid_now.stdout | default('unknown') }}"

    - name: Reboot to validate cold-boot path (optional)
      reboot:
        msg: "Rebooting to validate STA mode holds after cold boot."
        reboot_timeout: 300
      when: ansible_check_mode == false
      # ^ remove this when if you DON'T want an automatic reboot during check mode distinction

  handlers:
    - name: Restart NetworkManager
      systemd:
        name: NetworkManager
        state: restarted

